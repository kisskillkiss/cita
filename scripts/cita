#!/bin/bash
set -e
sudo(){
    set -o noglob

    if [ "$(whoami)" == "root" ] ; then
        $*
    else
        /usr/bin/sudo $*
    fi
    set +o noglob
}

start_rabbitmq() {
    # config rabbitmq
    if [[ `uname` == 'Darwin' ]]
    then
        ps -ax | grep rabbitmq-server | grep -v grep > /dev/null || brew services restart rabbitmq > /dev/null
        RABBITMQ_USER=cita_monitor
        RABBITMQ_PASSWD=cita_monitor
        sudo rabbitmqctl list_vhosts | grep ${node}                            > /dev/null || sudo rabbitmqctl add_vhost ${node} > /dev/null
        sudo rabbitmqctl set_permissions -p ${node} guest '.*' '.*' '.*'       > /dev/null
        sudo rabbitmq-plugins enable rabbitmq_management                       > /dev/null
        sudo rabbitmqctl  list_users | grep ${RABBITMQ_USER}                   > /dev/null || sudo rabbitmqctl add_user ${RABBITMQ_USER} ${RABBITMQ_PASSWD} > /dev/null
        sudo rabbitmqctl  set_user_tags  ${RABBITMQ_USER} monitoring           > /dev/null
        sudo rabbitmqctl set_permissions -p ${node}  ${RABBITMQ_USER} '.*' '.*' '.*'      > /dev/null
    else
        flock -x -w 30 /tmp/rabbitmq.lock -c "ps -C rabbitmq-server > /dev/null || sudo /etc/init.d/rabbitmq-server restart > /dev/null"
        RABBITMQ_USER=cita_monitor
        RABBITMQ_PASSWD=cita_monitor
        flock -x -w 30 /tmp/rabbitmq.lock -c "sudo rabbitmqctl list_vhosts | grep ${node} > /dev/null || sudo rabbitmqctl add_vhost ${node} > /dev/null"
        flock -x -w 30 /tmp/rabbitmq.lock -c "sudo rabbitmqctl set_permissions -p ${node} guest '.*' '.*' '.*' > /dev/null"
        flock -x -w 30 /tmp/rabbitmq.lock -c "sudo rabbitmq-plugins enable rabbitmq_management > /dev/null"
        flock -x -w 30 /tmp/rabbitmq.lock -c "sudo rabbitmqctl  list_users | grep ${RABBITMQ_USER} > /dev/null || sudo rabbitmqctl add_user ${RABBITMQ_USER} ${RABBITMQ_PASSWD} > /dev/null"
        flock -x -w 30 /tmp/rabbitmq.lock -c "sudo rabbitmqctl  set_user_tags  ${RABBITMQ_USER} monitoring > /dev/null"
        flock -x -w 30 /tmp/rabbitmq.lock -c "sudo rabbitmqctl set_permissions -p ${node}  ${RABBITMQ_USER} '.*' '.*' '.*' > /dev/null"
    fi
}

setup() {
    for i in {1..3}
    do
        start_rabbitmq
        curl http://localhost:15672/ > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "setup ok!"
            exit 0
        fi
    done
    echo "setup failed!"
    exit 1
}

start() {
    debug=$1
    mock=$2
    tnode=`echo ${node}|sed 's/\//%2f/g'`
    mkdir -p logs

    # clean queues
    curl -i -u guest:guest -H "content-type:application/json" -XDELETE http://localhost:15672/api/queues/${tnode}/auth               > /dev/null 2>&1 || true
    curl -i -u guest:guest -H "content-type:application/json" -XDELETE http://localhost:15672/api/queues/${tnode}/chain              > /dev/null 2>&1 || true
    curl -i -u guest:guest -H "content-type:application/json" -XDELETE http://localhost:15672/api/queues/${tnode}/consensus          > /dev/null 2>&1 || true
    curl -i -u guest:guest -H "content-type:application/json" -XDELETE http://localhost:15672/api/queues/${tnode}/jsonrpc            > /dev/null 2>&1 || true
    curl -i -u guest:guest -H "content-type:application/json" -XDELETE http://localhost:15672/api/queues/${tnode}/network            > /dev/null 2>&1 || true
    curl -i -u guest:guest -H "content-type:application/json" -XDELETE http://localhost:15672/api/queues/${tnode}/network_tx         > /dev/null 2>&1 || true
    curl -i -u guest:guest -H "content-type:application/json" -XDELETE http://localhost:15672/api/queues/${tnode}/network_consensus  > /dev/null 2>&1 || true
    curl -i -u guest:guest -H "content-type:application/json" -XDELETE http://localhost:15672/api/queues/${tnode}/executor           > /dev/null 2>&1 || true

    [[ -z ${mock} ]] && config="forever.toml" || config="forever_mock.toml"

    if [ -z ${debug} ]; then
        cita-forever -c ${config} start > /dev/null 2>&1
    else
        RUST_LOG=cita_auth=${debug},cita_chain=${debug},cita_executor=${debug},cita_jsonrpc=${debug},cita_network=${debug},cita_bft=${debug},\
core_executor=${debug},engine=${debug},jsonrpc_types=${debug},libproto=${debug},proof=${debug},txpool=${debug},core=${debug} \
        cita-forever -c ${config} start > /dev/null 2>&1
    fi

    sleep 3

    cita_pid=`cat .cita-forever.pid`
    pid_file="/proc/${cita_pid}/cmdline"

    while [ -e ${pid_file} ];do
        sleep 3;
    done
}

clean() {
    # backup and clean data&log
    backup_dir=$(date -Iseconds)/
    if [[ -e data && -e logs ]] ; then
        mkdir ${backup_dir}
    fi
    if [ -e data ] ; then
        mv data ${backup_dir}
    fi
    if [ -e logs ] ; then
        mv logs ${backup_dir}
    fi
}

stop() {
    cita-forever stop > /dev/null 2>&1
}

rotate() {
    cita-forever logrotate > /dev/null 2>&1
}

status() {
    for pid_file in `find . -name "*.pid"`; do
        pid=$(cat ${pid_file})
        ps -A -o command=50,pid,time|grep ${pid} |grep -v "grep" || true
    done

}

logs() {
    service=$1
    tail -f logs/cita-${service}.log
}

stat() {
    stat_cmd="pidstat -r -u -d"
    for pid_file in `find . -name "*.pid"`; do
        pid=$(cat ${pid_file})
        stat_cmd=$stat_cmd" -p ${pid}"
    done
    while [ 1 ]; do
        $stat_cmd
        echo
        echo "disk usage bytes $(du -s ./data)"
        sleep 3
    done
}

usage(){
    echo "      usage: $0 COMMAND node_dir [args...]"
    echo "      Commands:"
    echo "      setup            setup cita run environment"
    echo "      start            start cita"
    echo "      stop             stop cita"
    echo "      restart          restart cita"
    echo "      logrotate        logrotate cita"
    echo "      status           display cita process status"
    echo "      logs             display cita's service(jsonrpc/chain/bft/network/auth) logs"
    echo "      clean            backup and clean cita data&log file"
    echo "      stat             display cita's cpu/ram/io/disk information"
    echo "      usage            display help information"
}

if [[ `uname` == 'Darwin' ]]
then
    SCRIPT_DIR=$(dirname $(realpath $0))
else
    SCRIPT_DIR=$(dirname $(readlink -f $0))
fi

export PATH=$PATH:${SCRIPT_DIR}/../bin

if [ $# -gt 4 ];
then
    help
else
    node=$2
    pushd . > /dev/null
    if [ ! -e ${node} ] ; then
        echo "no such node directory: ${node}"
        exit 1
    fi
    cd ${node}
    case $1 in
        setup)
            setup
            ;;
        start)
            stop > /dev/null 2>&1 || true
            debug=$3
            mock=$4
            start ${debug} ${mock}
            ;;
        stop)
            stop
            ;;
        restart)
            stop ||true
            debug=$3
            mock=$4
            start ${debug} ${mock}
            ;;
        logrotate)
            rotate
            ;;
        status)
            status
            ;;
        logs)
            if [ $# -ne 3 ]; then
                echo "usage: $0 logs node service"
                exit 1
            fi
            service=$3
            logs ${service}
            ;;
        stat)
            stat
            ;;
        clean)
            clean
            ;;
        help)
            usage
            ;;
        *)
            usage
            ;;
    esac
    popd > /dev/null
fi
